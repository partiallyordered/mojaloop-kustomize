resources:
- deployment.yaml
- service.yaml
- ./handlers/transfer-fulfil
- ./handlers/transfer-prepare
- ./handlers/transfer-position
- ./handlers/transfer-get
- ./handlers/timeout
- ./handlers/admin-transfer

# TODO: it should be possible to reference the kafka base here. Perhaps modifying every
# deployment to have environment variables using k8s variable replacement functionality:
# - name: KAFKA_SVC
#   value: kafka
# - name: KAFKA_PORT
#   value: 9092
# - name: CLEDG_KAFKA__CONSUMER__ADMIN__TRANSFER__config__rdkafkaConf__metadata
#   value: $(KAFKA_SVC):$(KAFKA_PORT)
# I'm unsure, but it may also be possible to use the valueAddTransformer. Alternatively, upstream
# could be changed to use KAFKA_HOST instead of KAFKA_SVC and KAFKA_PORT.
# Note: the central settlement deferred settlement handler uses this pattern also, so if it's
# fixed here, it should be fixed there.
configMapGenerator:
- name: centralledger-kafka
  literals:
  - CLEDG_KAFKA__CONSUMER__TRANSFER__PREPARE__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__PRODUCER__TRANSFER__PREPARE__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__TRANSFER__POSITION__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__PRODUCER__TRANSFER__POSITION__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__BULK__GET__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__BULK__PREPARE__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__BULK__PROCESSING__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__BULK__FULFIL__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__PRODUCER__BULK__PROCESSING__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__TRANSFER__GET__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__TRANSFER__FULFIL__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__PRODUCER__TRANSFER__FULFIL__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__CONSUMER__ADMIN__TRANSFER__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__PRODUCER__ADMIN__TRANSFER__config__rdkafkaConf__metadata.broker.list=kafka:9092
  - CLEDG_KAFKA__PRODUCER__NOTIFICATION__EVENT__config__rdkafkaConf__metadata.broker.list=kafka:9092

patches:
- target:
    kind: Deployment
    name: centralledger-handler-.*
  patch: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: ignored-by-kustomize
    spec:
      template:
        spec:
          containers:
          - name: handler
            envFrom:
            - configMapRef:
                name: centralledger-kafka
            env:
            - name: CLEDG_DATABASE__SCHEMA
              valueFrom:
                configMapKeyRef:
                  # TODO: this and all other references to centralledger-mysql should probably
                  # reference plain mysql. At the time of writing it seems like this works if a
                  # mysql base is only used once, like this:
                  #
                  #    mysql
                  #      |
                  # centralledger
                  #      |
                  #   mojaloop
                  #
                  # However, it seems like when it's used in a diamond, like this:
                  #
                  #            mysql
                  #           /     \
                  # centralledger    als
                  #          \       /
                  #           mojaloop
                  #
                  # the configmap name won't be changed.
                  # Note that this is arguably a consequence of using the wrong pattern anyway. We
                  # should perhaps not be expecting to access data that's not yet defined here.
                  # Instead, we should probably be setting this data in the overlay, where we
                  # compose central ledger and mysql
                  name: centralledger-mysql
                  key: MYSQL_DATABASE
            - name: CLEDG_DATABASE__USER
              valueFrom:
                configMapKeyRef:
                  name: centralledger-mysql
                  key: MYSQL_USER
            - name: CLEDG_DATABASE__HOST
              valueFrom:
                configMapKeyRef:
                  name: centralledger-mysql
                  key: MYSQL_SERVICE
            - name: CLEDG_DATABASE__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: centralledger-mysql
                  key: MYSQL_PASSWORD
          # TODO: apply wait-for-mysql and wait-for-kafka to all relevant images with a patch as
          #       follows. This also means removing them from the bases. Additionally, use the
          #       relevant MySQL and Kafka configmaps.
          # initContainers:
          #   - name: wait-for-mysql
          #     command:
          #     - sh
          #     - -c
          #     - until result=$(mysql -h centralledger-mysql -P 3306 -u $(MYSQL_USER)
          #       --password=$(MYSQL_PASSWORD)  $(MYSQL_DATABASE) -ss -N -e 'select is_locked from
          #       migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result
          #       ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting
          #       for MySQL; sleep 2; done;
          #     image: mysql:latest
          #     imagePullPolicy: Always
          #     envFrom:
          #       - configMapRef:
          #           name: centralledger-mysql
          #       - secretRef:
          #           name: centralledger-mysql
          #   - command:
          #     - sh
          #     - -c
          #     - until ./bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092;
          #       do echo waiting for Kafka; sleep 2; done;
          #     image: solsson/kafka:latest
          #     imagePullPolicy: Always
          #     name: wait-for-kafka
